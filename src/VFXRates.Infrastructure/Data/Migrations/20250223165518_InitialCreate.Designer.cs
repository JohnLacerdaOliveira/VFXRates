// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VFXRates.Infrastructure.Data.dbContext;

#nullable disable

namespace VFXRates.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FxRatesDbContext))]
    [Migration("20250223165518_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VFXRates.Domain.Entities.FxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ask")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("Bid")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrency", "QuoteCurrency")
                        .IsUnique();

                    b.ToTable("FxRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ask = 0.9100m,
                            BaseCurrency = "USD",
                            Bid = 0.9000m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "EUR"
                        },
                        new
                        {
                            Id = 2,
                            Ask = 0.8100m,
                            BaseCurrency = "EUR",
                            Bid = 0.8000m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "GBP"
                        },
                        new
                        {
                            Id = 3,
                            Ask = 110.6000m,
                            BaseCurrency = "USD",
                            Bid = 110.5000m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "JPY"
                        },
                        new
                        {
                            Id = 4,
                            Ask = 0.7100m,
                            BaseCurrency = "AUD",
                            Bid = 0.7000m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "USD"
                        },
                        new
                        {
                            Id = 5,
                            Ask = 0.7600m,
                            BaseCurrency = "CAD",
                            Bid = 0.7500m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "USD"
                        },
                        new
                        {
                            Id = 6,
                            Ask = 0.9300m,
                            BaseCurrency = "CHF",
                            Bid = 0.9200m,
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            QuoteCurrency = "EUR"
                        });
                });

            modelBuilder.Entity("VFXRates.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("VFXRates.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2a$11$9jzz74pa6aZj/omFYbXETOknRyLNz2YcdNDrpk1bx2UeDkHOjPY.S",
                            Username = "testuser"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
