{
	"info": {
		"_postman_id": "ff789317-abb0-40ab-b08a-d588b5571e3f",
		"name": "VFXRates",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25227939"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check if the response status is 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Check if the response is JSON\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test 3: Check if 'token' property exists\r",
									"pm.test(\"Response has 'token' property\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"// Test 4: Check if 'token' is a non-empty string\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.token).to.be.a(\"string\").and.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser\",\r\n  \"password\": \"testpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Authentication",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"invalid\",\r\n  \"password\": \"invalid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"JohnLacerda\",\r\n  \"password\": \"PasswordSuperSegura\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate New User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"JohnLacerda\",\r\n  \"password\": \"PasswordSuperSegura\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FxRates",
			"item": [
				{
					"name": "All FxRates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should be an array\", function () {",
									"    pm.response.to.be.json;",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each object contains required fields\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"    ",
									"    jsonData.forEach(rate => {",
									"        pm.expect(rate).to.have.property(\"baseCurrency\");",
									"        pm.expect(rate).to.have.property(\"quoteCurrency\");",
									"        pm.expect(rate).to.have.property(\"bid\");",
									"        pm.expect(rate).to.have.property(\"ask\");",
									"        pm.expect(rate).to.have.property(\"lastUpdated\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 when ID is valid\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should be an object\", function () {",
									"    pm.expect(pm.response).to.be.json;",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"baseCurrency\");",
									"    pm.expect(jsonData).to.have.property(\"quoteCurrency\");",
									"    pm.expect(jsonData).to.have.property(\"bid\");",
									"    pm.expect(jsonData).to.have.property(\"ask\");",
									"    pm.expect(jsonData).to.have.property(\"lastUpdated\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/id/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"id",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "By Non Existing Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for an invalid ID\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response follows RFC 7807 error format\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"type\");",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"    pm.expect(jsonData).to.have.property(\"traceId\"); // Ensuring traceId exists",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/id/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"id",
								"9999"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "FxRate by Currency Pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for valid currency pair\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"baseCurrency\", \"USD\");",
									"    pm.expect(jsonData).to.have.property(\"quoteCurrency\", \"EUR\");",
									"    pm.expect(jsonData).to.have.property(\"bid\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"ask\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"lastUpdated\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/pair/USD/EUR",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"pair",
								"USD",
								"EUR"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "FxRate by Non Local  Currency Pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for valid currency pair\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"baseCurrency\", \"YER\");",
									"    pm.expect(jsonData).to.have.property(\"quoteCurrency\", \"USD\");",
									"    pm.expect(jsonData).to.have.property(\"bid\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"ask\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"lastUpdated\").that.is.a(\"string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/pair/YER/USD",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"pair",
								"YER",
								"USD"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "FxRate by Non Existing  Currency Pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for invalid currency pair\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Validate current response\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.error;",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/pair/USD/XXX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"pair",
								"USD",
								"XXX"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "FxRate by Invalid Currency Pair",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the reference error from ppm to pm",
									"pm.test(\"Status code is 404 for invalid currency pair format\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response follows RFC 7807 error format\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"type\");",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"    pm.expect(jsonData).to.have.property(\"traceId\"); // Ensuring traceId exists",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/pair/RDFT/F",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"pair",
								"RDFT",
								"F"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "New FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains created FX rate\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"baseCurrency\", \"XXX\");",
									"    pm.expect(jsonData).to.have.property(\"quoteCurrency\", \"ZZZ\");",
									"    pm.expect(jsonData).to.have.property(\"bid\", 0.9000);",
									"    pm.expect(jsonData).to.have.property(\"ask\", 0.9100);",
									"    pm.expect(jsonData).to.have.property(\"lastUpdated\").that.is.a(\"string\"); // Check if date exists",
									"});",
									"",
									"pm.test(\"Location header is correctly set\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.include(\"/api/FxRates/pair/XXX/ZZZ\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"BaseCurrency\": \"XXX\",\n  \"QuoteCurrency\": \"ZZZ\",\n  \"Bid\": 0.9000,\n  \"Ask\": 0.9100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "New Duplicate FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"baseCurrency\": \"USD\",\n        \"quoteCurrency\": \"EUR\",\n        \"bid\": 0.900000,\n        \"ask\": 0.910000\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains updated FX rate details\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
									"    pm.expect(jsonData.quoteCurrency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.bid).to.eql(0.0001);",
									"    pm.expect(jsonData.ask).to.eql(0.0030);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"BaseCurrency\": \"USD\",\n  \"QuoteCurrency\": \"EUR\",\n  \"Bid\": 0.0001,\n  \"Ask\": 0.0030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/USD/EUR",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"USD",
								"EUR"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Non Existing FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response follows RFC 7807 error format\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData).to.have.property(\"type\");",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);",
									"    pm.expect(jsonData).to.have.property(\"traceId\"); // Ensuring traceId exists",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"baseCurrency\": \"NNN\",\n    \"quoteCurrency\": \"XXX\",\n    \"bid\": 0.0001,\n    \"ask\": 0.0030\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/NNN/XXX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"NNN",
								"XXX"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/USD/EUR",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"USD",
								"EUR"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Non Existing FxRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.json().type).to.equal(\"https://tools.ietf.org/html/rfc9110#section-15.5.5\");",
									"    pm.expect(pm.response.json().title).to.equal(\"Not Found\");",
									"    pm.expect(pm.response.json().status).to.equal(404);",
									"    pm.expect(pm.response.json().traceId).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/FxRates/BBB/AAA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"FxRates",
								"BBB",
								"AAA"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImp0aSI6ImU3ZjYwNDk2LTc0ZDUtNDE5Ny05ZjQxLTc3MGI2ODBhMTI1NCIsImV4cCI6MTc0MDM3MTYzNywiaXNzIjoiWW91ckFwcE5hbWUiLCJhdWQiOiJZb3VyQXBwQXVkaWVuY2UifQ.sqWJfyQzNdQ4LZ6Vfg8Dqgxpku0zKhxicyXGqJVpf24",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImp0aSI6ImE4OWFkYTVlLTJiMTQtNDA3MC05MDhhLTM5NWFhMWFkYTBkYyIsImV4cCI6MTc0MDM3MTM1OSwiaXNzIjoiWW91ckFwcE5hbWUiLCJhdWQiOiJZb3VyQXBwQXVkaWVuY2UifQ.IjSdG2soq1Vik8Y1wkEEIOKpXhyoMwR6b0vRSqPS6h0",
			"type": "string"
		}
	]
}